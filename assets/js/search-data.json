{
  
    
        "post0": {
            "title": "Bash (Bourne-Again SHell) Basic Commands",
            "content": "Some critical baselines . This blog-post (and any that follows) goal is to act as an external memory deposit for bare and crucial essentials. They are intended to be the foundations on your path to mastering the art and science of making sense of data. These will cover many different topics that we will rely on during this course. . The current post covers one of the most basic and underestimated skills: a command-line interface (CLI). Modern scientists nowadays need massive amounts of computational power to support their findings. This requires using shared resources such as high processing clusters (HPC) or powerful local Linux servers. Interacting with these sort of interfaces requires basic and advance command-line skills. . In computing, a shell refers to some interface between the user (that is you) and the operating system (e.g. Mac, Windows, etc.). It is common to separate operating system shell interfaces into two types: . Command-line. | Graphical based. | Various tasks will call for different interfaces, and in this course, we will be using versions of both intensively. The bash Shell (Bourne Again SHell), the focus of this post, is obviously a CLI. . Bash (Bourne-Again SHell) Essentials . Bash is a simple programming language that allows you to enter commands and — most importantly — execute lists of commands. You can also create decisions, loops, and do other things to allow you to write scripts that are more than just a list of programs to run. As such if used correctly, it can automate many of the things you do. . In this section, we will cover the most popular commands, learn when and how to use them. If you want to extend your understanding, you should consider taking Learn bash the Hard Way. . Important: Bash is just one version of many different CLI (and is indeed the simplest of the bunch) that exist nowadays (e.g. (KSH, ZSH, or TCSH, etc.) Testing the concepts included in this post can be achieved using a mac or linux terminal or in windows by enabling bash subsystem . Help .",
            "url": "https://esoreq.github.io/maxPlanck/jupyter/2020/11/01/note.html",
            "relUrl": "/jupyter/2020/11/01/note.html",
            "date": " • Nov 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Syllabus for 2021 course",
            "content": ". Important: The first five days contain more information than the other days . BC Day One - Bash essentials . Introduction . command line interactions basics . Basic operations and working with files | File operations | User environment | Text editors (vi/vim, nano or emacs) | Text manipulation (cat, echo, sed, awk, grep, tr, wc, cut) ## Advanced CLI | Basic scripting | Functions and shell scripts | SSH and Git basics | BC Day Two - Python essentials . Python Basics . Printing in python | Data Types | Variables | Expressions | String Operations ## Python Data Structures | Lists | Tuples | Sets | Dictionaries ## Python Programming Fundamentals | Conditions | Loops | list comprehension | Lambda Functions ## Python Style Guide Recommendation | General Guidelines Explicit code | One statement per line | Function arguments | Unpacking | . | Zen of Python | PEP 8 | Conventions Check if a variable equals a constant | Access a Dictionary Element | Short Ways to Manipulate Lists | Filtering a list | Modifying the values in a list | Line Continuations ## Python advanced boot camp | . | Functions | Classes | Modules | Packages | BC Day Three - Data visualization basics . Introduction to exploratory data visualization (EDV) . Deviation from a baseline | Correlation between variables | Ranking across categories | Distribution of variables | Temporal Change of variables | Relative and absolute magnitude comparisons of variables | Part-to-whole Relationship | Spatial magnitude, change or deviation plots | Flow plots ## Visual communication basics | Graphic elements attributes Shape | Position | Size | Color | Orientation | Opacity | . | Composition attributes Contrast | Repetition | Alignment | Proximity | Hierarchy | Grouping | Sequence | Space ## Basics of Matplotlib | . | Parts of a Figure | Backends | EDV examples | BC Day Four - Numpy essentials . Numpy basics . Data types | Vectors, Arrays, Volumes and Beyond | Adding, removing, sorting elements | Indexing, and slicing arrays | Views and copies of arrays | Array operations basics (e.g. sum, max etc. ) | Random basics ## Numpy advanced | Transposing, reshaping and flattening a matrix | Matrix Operations | Vectorization | BC Day Five - Pandas essentials . Introduction to pandas . Creating, updating, extending, changing and saving Pandas Data Structures | Wide, long and hierarchical data frames | Indexing and slicing data frames | Cleaning and transforming data | Merging joining and concatenation of data frames | Week one - Reproducible research . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Ten Simple Rules for Reproducible Research . Article: Ten Simple Rules for Reproducible Research in Jupyter Notebooks . Note: 45 minutes Hands-on exercise . Markdown basics in Jupyter . Markdown Syntax | Hyperlinks And References | Mathematical Equations And LaTeX | Creating Tables . Note: 15 minutes presentation on ## From Replicability to Reproducibility | Levels of Reproducibility | Things to avoid | Tools of the trade | Week Two - Exploratory Data Analysis . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Point of View: Open exploration . Article: Point of View: Open exploration . Note: 45 minutes Hands-on exercise . Exploratory Data Analysis . Generating an EDA preliminary report | Descriptive EDA Tables | EDA Plots . Note: 15 minutes presentation on ## Data Analysis exploratory cycle | Preliminary inspection of data using EDA | Common First Steps In Any EDA | Different Data Types | Populations, Samples And Distributions | Things to avoid | Week Three - Data Acquisition, cleaning and Curation . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Reproducibility in Cognitive Neuroscience . Article: Progress Toward Openness, Transparency, and Reproducibility in Cognitive Neuroscience . Note: 45 minutes Hands-on exercise . Dealing with big data . Downloading and storing data locally | Cleaning data in a non-destructive way | Creating a pre-processing report . Note: 15 minutes presentation on ## Data curation challenges in different domains | Mapping the data lake of Cognitive Neuroscience | Modality general and specific pitfalls | Challenges in Data synthesis | Week four - Data mining and feature engineering . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Fantastic Features and Where to Find Them . Article: Fantastic Features and Where to Find Them: Detecting CognitiveImpairment with a Subsequence Classification Guided Approach . Note: 45 minutes of Hands-on exercise . Creating features based on domain expertise . Downloading and storing data locally | Cleaning data in a non-destructive way | Creating a pre-processing report . Note: 15 minutes presentation on ## Feature Engineering | Variable transformation. scale change | simplify non-linear relationships into linear relationships | transform skewed distribution into Symmetric distribution | . | Transformation methods Logarithm | Square / Cube root | Binning | . | Variable / Feature creation. Derived variables | Dummy variables | Domain expert variables | . | Week five - Dimensionality reduction and unsupervised learning . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Ghosts in machine learning for cognitive neuroscience . Article: Ghosts in machine learning for cognitive neuroscience: Moving from datato theory . Note: 45 minutes of Hands-on exercise . Dimensionality reduction a multi-edged sword . Understanding Dimensionality reduction application and theory Principal component analysis basics | Global vs local non-linear approaches | Visualising complex states . Note: 15 minutes overview on Dimensionality reduction | | Week six - Data clustering . . Note: 30 minutes (20 min students presentation + 10 min discussion) . Visual field map clusters . Article: Visual field map clusters in human frontoparietal cortex . Note: 30 minutes overview on Cluster Analysis . Overview on Cluster Analysis . Cluster Analysis Basics What is Cluster Analysis? | Applications of Cluster Analysis | Putting Clustering into Context | The Benefits of Cluster Analysis | The Different Types of Cluster Analysis | . | What are proximity metrices Distance metrics | Similarity metrics | . | Intution behind common Cluster Algorithms | Clustering performance evaluation for Known classes and Unknown classes . Note: 30 minutes of Hands-on exercise ## Comparing clustering algoritems on controlled toy data-sets | K-Means Clustering | Spectral Clustering | Density-Based Spatial Clustering of Applications with Noise | Agglomerative Hierarchical Clustering | Week seven - Supervised learning (regression models) .",
            "url": "https://esoreq.github.io/maxPlanck/jupyter/2020/11/01/Syllabus.html",
            "relUrl": "/jupyter/2020/11/01/Syllabus.html",
            "date": " • Nov 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://esoreq.github.io/maxPlanck/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://esoreq.github.io/maxPlanck/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://esoreq.github.io/maxPlanck/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://esoreq.github.io/maxPlanck/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}